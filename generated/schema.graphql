### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  city: String!
  countryCode: String!
  street: String!
}

type BatchPayload {
  count: Int!
}

type BlogPost {
  author: User
  comments(cursor: BlogPostCommentWhereUniqueInput, skip: Int, take: Int): [BlogPostComment!]!
  id: String!
  text: String!
  title: String!
}

type BlogPostComment {
  author: User
  id: String!
  post: BlogPost
  text: String!
}

input BlogPostCommentCreateInput {
  author: UserCreateOneWithoutCommentsInput
  id: String
  post: BlogPostCreateOneWithoutCommentsInput
  text: String!
}

input BlogPostCommentCreateManyWithoutAuthorInput {
  connect: [BlogPostCommentWhereUniqueInput!]
  create: [BlogPostCommentCreateWithoutAuthorInput!]
}

input BlogPostCommentCreateManyWithoutPostInput {
  connect: [BlogPostCommentWhereUniqueInput!]
  create: [BlogPostCommentCreateWithoutPostInput!]
}

input BlogPostCommentCreateWithoutAuthorInput {
  id: String
  post: BlogPostCreateOneWithoutCommentsInput
  text: String!
}

input BlogPostCommentCreateWithoutPostInput {
  author: UserCreateOneWithoutCommentsInput
  id: String
  text: String!
}

input BlogPostCommentListRelationFilter {
  every: BlogPostCommentWhereInput
  none: BlogPostCommentWhereInput
  some: BlogPostCommentWhereInput
}

input BlogPostCommentOrderByInput {
  authorId: SortOrder
  id: SortOrder
  postId: SortOrder
  text: SortOrder
}

input BlogPostCommentScalarWhereInput {
  AND: [BlogPostCommentScalarWhereInput!]
  authorId: StringNullableFilter
  id: StringFilter
  NOT: [BlogPostCommentScalarWhereInput!]
  OR: [BlogPostCommentScalarWhereInput!]
  postId: StringNullableFilter
  text: StringFilter
}

input BlogPostCommentUpdateInput {
  author: UserUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  post: BlogPostUpdateOneWithoutCommentsInput
  text: StringFieldUpdateOperationsInput
}

input BlogPostCommentUpdateManyDataInput {
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input BlogPostCommentUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input BlogPostCommentUpdateManyWithoutAuthorInput {
  connect: [BlogPostCommentWhereUniqueInput!]
  create: [BlogPostCommentCreateWithoutAuthorInput!]
  delete: [BlogPostCommentWhereUniqueInput!]
  deleteMany: [BlogPostCommentScalarWhereInput!]
  disconnect: [BlogPostCommentWhereUniqueInput!]
  set: [BlogPostCommentWhereUniqueInput!]
  update: [BlogPostCommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BlogPostCommentUpdateManyWithWhereNestedInput!]
  upsert: [BlogPostCommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BlogPostCommentUpdateManyWithoutPostInput {
  connect: [BlogPostCommentWhereUniqueInput!]
  create: [BlogPostCommentCreateWithoutPostInput!]
  delete: [BlogPostCommentWhereUniqueInput!]
  deleteMany: [BlogPostCommentScalarWhereInput!]
  disconnect: [BlogPostCommentWhereUniqueInput!]
  set: [BlogPostCommentWhereUniqueInput!]
  update: [BlogPostCommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [BlogPostCommentUpdateManyWithWhereNestedInput!]
  upsert: [BlogPostCommentUpsertWithWhereUniqueWithoutPostInput!]
}

input BlogPostCommentUpdateManyWithWhereNestedInput {
  data: BlogPostCommentUpdateManyDataInput!
  where: BlogPostCommentScalarWhereInput!
}

input BlogPostCommentUpdateWithoutAuthorDataInput {
  id: StringFieldUpdateOperationsInput
  post: BlogPostUpdateOneWithoutCommentsInput
  text: StringFieldUpdateOperationsInput
}

input BlogPostCommentUpdateWithoutPostDataInput {
  author: UserUpdateOneWithoutCommentsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input BlogPostCommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: BlogPostCommentUpdateWithoutAuthorDataInput!
  where: BlogPostCommentWhereUniqueInput!
}

input BlogPostCommentUpdateWithWhereUniqueWithoutPostInput {
  data: BlogPostCommentUpdateWithoutPostDataInput!
  where: BlogPostCommentWhereUniqueInput!
}

input BlogPostCommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: BlogPostCommentCreateWithoutAuthorInput!
  update: BlogPostCommentUpdateWithoutAuthorDataInput!
  where: BlogPostCommentWhereUniqueInput!
}

input BlogPostCommentUpsertWithWhereUniqueWithoutPostInput {
  create: BlogPostCommentCreateWithoutPostInput!
  update: BlogPostCommentUpdateWithoutPostDataInput!
  where: BlogPostCommentWhereUniqueInput!
}

input BlogPostCommentWhereInput {
  AND: [BlogPostCommentWhereInput!]
  author: UserWhereInput
  authorId: StringNullableFilter
  id: StringFilter
  NOT: [BlogPostCommentWhereInput!]
  OR: [BlogPostCommentWhereInput!]
  post: BlogPostWhereInput
  postId: StringNullableFilter
  text: StringFilter
}

input BlogPostCommentWhereUniqueInput {
  id: String
}

input BlogPostCreateInput {
  author: UserCreateOneWithoutBlogPostsInput
  comments: BlogPostCommentCreateManyWithoutPostInput
  id: String
  text: String!
  title: String!
}

input BlogPostCreateManyWithoutAuthorInput {
  connect: [BlogPostWhereUniqueInput!]
  create: [BlogPostCreateWithoutAuthorInput!]
}

input BlogPostCreateOneWithoutCommentsInput {
  connect: BlogPostWhereUniqueInput
  create: BlogPostCreateWithoutCommentsInput
}

input BlogPostCreateWithoutAuthorInput {
  comments: BlogPostCommentCreateManyWithoutPostInput
  id: String
  text: String!
  title: String!
}

input BlogPostCreateWithoutCommentsInput {
  author: UserCreateOneWithoutBlogPostsInput
  id: String
  text: String!
  title: String!
}

input BlogPostListRelationFilter {
  every: BlogPostWhereInput
  none: BlogPostWhereInput
  some: BlogPostWhereInput
}

input BlogPostOrderByInput {
  authorId: SortOrder
  id: SortOrder
  text: SortOrder
  title: SortOrder
}

input BlogPostScalarWhereInput {
  AND: [BlogPostScalarWhereInput!]
  authorId: StringNullableFilter
  id: StringFilter
  NOT: [BlogPostScalarWhereInput!]
  OR: [BlogPostScalarWhereInput!]
  text: StringFilter
  title: StringFilter
}

input BlogPostUpdateInput {
  author: UserUpdateOneWithoutBlogPostsInput
  comments: BlogPostCommentUpdateManyWithoutPostInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input BlogPostUpdateManyDataInput {
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input BlogPostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input BlogPostUpdateManyWithoutAuthorInput {
  connect: [BlogPostWhereUniqueInput!]
  create: [BlogPostCreateWithoutAuthorInput!]
  delete: [BlogPostWhereUniqueInput!]
  deleteMany: [BlogPostScalarWhereInput!]
  disconnect: [BlogPostWhereUniqueInput!]
  set: [BlogPostWhereUniqueInput!]
  update: [BlogPostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BlogPostUpdateManyWithWhereNestedInput!]
  upsert: [BlogPostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BlogPostUpdateManyWithWhereNestedInput {
  data: BlogPostUpdateManyDataInput!
  where: BlogPostScalarWhereInput!
}

input BlogPostUpdateOneWithoutCommentsInput {
  connect: BlogPostWhereUniqueInput
  create: BlogPostCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: BlogPostUpdateWithoutCommentsDataInput
  upsert: BlogPostUpsertWithoutCommentsInput
}

input BlogPostUpdateWithoutAuthorDataInput {
  comments: BlogPostCommentUpdateManyWithoutPostInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input BlogPostUpdateWithoutCommentsDataInput {
  author: UserUpdateOneWithoutBlogPostsInput
  id: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input BlogPostUpdateWithWhereUniqueWithoutAuthorInput {
  data: BlogPostUpdateWithoutAuthorDataInput!
  where: BlogPostWhereUniqueInput!
}

input BlogPostUpsertWithoutCommentsInput {
  create: BlogPostCreateWithoutCommentsInput!
  update: BlogPostUpdateWithoutCommentsDataInput!
}

input BlogPostUpsertWithWhereUniqueWithoutAuthorInput {
  create: BlogPostCreateWithoutAuthorInput!
  update: BlogPostUpdateWithoutAuthorDataInput!
  where: BlogPostWhereUniqueInput!
}

input BlogPostWhereInput {
  AND: [BlogPostWhereInput!]
  author: UserWhereInput
  authorId: StringNullableFilter
  comments: BlogPostCommentListRelationFilter
  id: StringFilter
  NOT: [BlogPostWhereInput!]
  OR: [BlogPostWhereInput!]
  text: StringFilter
  title: StringFilter
}

input BlogPostWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

scalar Json

input JsonNullableFilter {
  equals: Json
  not: Json
}

type Mutation {
  createOneBlogPost(data: BlogPostCreateInput!): BlogPost!
  createOneBlogPostComment(data: BlogPostCommentCreateInput!): BlogPostComment!
  createOneSomePublicRecordWithIntId(data: SomePublicRecordWithIntIdCreateInput!): SomePublicRecordWithIntId!
  createOneUser(data: UserCreateInput!): User!
  createOneUserRole(data: UserRoleCreateInput!): UserRole!
  deleteManyBlogPost(where: BlogPostWhereInput): BatchPayload!
  deleteManyBlogPostComment(where: BlogPostCommentWhereInput): BatchPayload!
  deleteManySomePublicRecordWithIntId(where: SomePublicRecordWithIntIdWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteManyUserRole(where: UserRoleWhereInput): BatchPayload!
  deleteOneBlogPost(where: BlogPostWhereUniqueInput!): BlogPost
  deleteOneBlogPostComment(where: BlogPostCommentWhereUniqueInput!): BlogPostComment
  deleteOneSomePublicRecordWithIntId(where: SomePublicRecordWithIntIdWhereUniqueInput!): SomePublicRecordWithIntId
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneUserRole(where: UserRoleWhereUniqueInput!): UserRole
  updateManyBlogPost(data: BlogPostUpdateManyMutationInput!, where: BlogPostWhereInput): BatchPayload!
  updateManyBlogPostComment(data: BlogPostCommentUpdateManyMutationInput!, where: BlogPostCommentWhereInput): BatchPayload!
  updateManySomePublicRecordWithIntId(data: SomePublicRecordWithIntIdUpdateManyMutationInput!, where: SomePublicRecordWithIntIdWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyUserRole(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  updateOneBlogPost(data: BlogPostUpdateInput!, where: BlogPostWhereUniqueInput!): BlogPost
  updateOneBlogPostComment(data: BlogPostCommentUpdateInput!, where: BlogPostCommentWhereUniqueInput!): BlogPostComment
  updateOneSomePublicRecordWithIntId(data: SomePublicRecordWithIntIdUpdateInput!, where: SomePublicRecordWithIntIdWhereUniqueInput!): SomePublicRecordWithIntId
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  upsertOneBlogPost(create: BlogPostCreateInput!, update: BlogPostUpdateInput!, where: BlogPostWhereUniqueInput!): BlogPost!
  upsertOneBlogPostComment(create: BlogPostCommentCreateInput!, update: BlogPostCommentUpdateInput!, where: BlogPostCommentWhereUniqueInput!): BlogPostComment!
  upsertOneSomePublicRecordWithIntId(create: SomePublicRecordWithIntIdCreateInput!, update: SomePublicRecordWithIntIdUpdateInput!, where: SomePublicRecordWithIntIdWhereUniqueInput!): SomePublicRecordWithIntId!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneUserRole(create: UserRoleCreateInput!, update: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  blogPost(where: BlogPostWhereUniqueInput!): BlogPost
  blogPostComment(where: BlogPostCommentWhereUniqueInput!): BlogPostComment
  blogPostComments(cursor: BlogPostCommentWhereUniqueInput, orderBy: [BlogPostCommentOrderByInput!], skip: Int, take: Int, where: BlogPostCommentWhereInput): [BlogPostComment!]!
  blogPostCommentsCount(cursor: BlogPostCommentWhereUniqueInput, orderBy: BlogPostCommentOrderByInput, skip: Int, take: Int, where: BlogPostCommentWhereInput): Int!
  blogPosts(cursor: BlogPostWhereUniqueInput, orderBy: [BlogPostOrderByInput!], skip: Int, take: Int, where: BlogPostWhereInput): [BlogPost!]!
  blogPostsCount(cursor: BlogPostWhereUniqueInput, orderBy: BlogPostOrderByInput, skip: Int, take: Int, where: BlogPostWhereInput): Int!
  somePublicRecordWithIntId(where: SomePublicRecordWithIntIdWhereUniqueInput!): SomePublicRecordWithIntId
  somePublicRecordWithIntIds(cursor: SomePublicRecordWithIntIdWhereUniqueInput, orderBy: [SomePublicRecordWithIntIdOrderByInput!], skip: Int, take: Int, where: SomePublicRecordWithIntIdWhereInput): [SomePublicRecordWithIntId!]!
  somePublicRecordWithIntIdsCount(cursor: SomePublicRecordWithIntIdWhereUniqueInput, orderBy: SomePublicRecordWithIntIdOrderByInput, skip: Int, take: Int, where: SomePublicRecordWithIntIdWhereInput): Int!
  user(where: UserWhereUniqueInput!): User
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  userRoles(cursor: UserRoleWhereUniqueInput, orderBy: [UserRoleOrderByInput!], skip: Int, take: Int, where: UserRoleWhereInput): [UserRole!]!
  userRolesCount(cursor: UserRoleWhereUniqueInput, orderBy: UserRoleOrderByInput, skip: Int, take: Int, where: UserRoleWhereInput): Int!
  users(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  usersCount(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): Int!
}

type SomePublicRecordWithIntId {
  id: Int!
  title: String!
}

input SomePublicRecordWithIntIdCreateInput {
  title: String!
}

input SomePublicRecordWithIntIdOrderByInput {
  id: SortOrder
  title: SortOrder
}

input SomePublicRecordWithIntIdUpdateInput {
  title: StringFieldUpdateOperationsInput
}

input SomePublicRecordWithIntIdUpdateManyMutationInput {
  title: StringFieldUpdateOperationsInput
}

input SomePublicRecordWithIntIdWhereInput {
  AND: [SomePublicRecordWithIntIdWhereInput!]
  id: IntFilter
  NOT: [SomePublicRecordWithIntIdWhereInput!]
  OR: [SomePublicRecordWithIntIdWhereInput!]
  title: StringFilter
}

input SomePublicRecordWithIntIdWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

enum Topic {
  TOPIC_ONE
  TOPIC_THREE
  TOPIC_TWO
}

type User {
  address: Address!
  blogPosts(cursor: BlogPostWhereUniqueInput, skip: Int, take: Int): [BlogPost!]!
  comments(cursor: BlogPostCommentWhereUniqueInput, skip: Int, take: Int): [BlogPostComment!]!
  email: String!
  firstName: String
  gender: Gender
  id: String!
  interests: [Topic!]!
  lastName: String
  logs(from: String!, to: String!): [String!]!
  roles(cursor: UserRoleWhereUniqueInput, skip: Int, take: Int, where: UserRoleWhereInput): [UserRole!]!
  userSocialMedia: UserSocialMedia
  wantsNewsletter: Boolean!
  yearOfBirth: Int
}

input UserCreateInput {
  address: Json
  blogPosts: BlogPostCreateManyWithoutAuthorInput
  comments: BlogPostCommentCreateManyWithoutAuthorInput
  email: String!
  firstName: String
  gender: Gender
  id: String
  interests: UserCreateinterestsInput
  lastName: String
  roles: UserRoleCreateManyWithoutUsersInput
  userSocialMedia: UserSocialMediaCreateOneWithoutUserInput
  wantsNewsletter: Boolean!
  yearOfBirth: Int
}

input UserCreateinterestsInput {
  set: [Topic!]
}

input UserCreateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRolesInput!]
}

input UserCreateOneWithoutBlogPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBlogPostsInput
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBlogPostsInput {
  address: Json
  comments: BlogPostCommentCreateManyWithoutAuthorInput
  email: String!
  firstName: String
  gender: Gender
  id: String
  interests: UserCreateinterestsInput
  lastName: String
  roles: UserRoleCreateManyWithoutUsersInput
  userSocialMedia: UserSocialMediaCreateOneWithoutUserInput
  wantsNewsletter: Boolean!
  yearOfBirth: Int
}

input UserCreateWithoutCommentsInput {
  address: Json
  blogPosts: BlogPostCreateManyWithoutAuthorInput
  email: String!
  firstName: String
  gender: Gender
  id: String
  interests: UserCreateinterestsInput
  lastName: String
  roles: UserRoleCreateManyWithoutUsersInput
  userSocialMedia: UserSocialMediaCreateOneWithoutUserInput
  wantsNewsletter: Boolean!
  yearOfBirth: Int
}

input UserCreateWithoutRolesInput {
  address: Json
  blogPosts: BlogPostCreateManyWithoutAuthorInput
  comments: BlogPostCommentCreateManyWithoutAuthorInput
  email: String!
  firstName: String
  gender: Gender
  id: String
  interests: UserCreateinterestsInput
  lastName: String
  userSocialMedia: UserSocialMediaCreateOneWithoutUserInput
  wantsNewsletter: Boolean!
  yearOfBirth: Int
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  address: SortOrder
  email: SortOrder
  firstName: SortOrder
  gender: SortOrder
  id: SortOrder
  interests: SortOrder
  lastName: SortOrder
  wantsNewsletter: SortOrder
  yearOfBirth: SortOrder
}

type UserRole {
  id: String!
  name: String!
}

input UserRoleCreateInput {
  id: String
  name: String!
  users: UserCreateManyWithoutRolesInput
}

input UserRoleCreateManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutUsersInput!]
}

input UserRoleCreateWithoutUsersInput {
  id: String
  name: String!
}

input UserRoleListRelationFilter {
  every: UserRoleWhereInput
  none: UserRoleWhereInput
  some: UserRoleWhereInput
}

input UserRoleOrderByInput {
  id: SortOrder
  name: SortOrder
}

input UserRoleScalarWhereInput {
  AND: [UserRoleScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [UserRoleScalarWhereInput!]
  OR: [UserRoleScalarWhereInput!]
}

input UserRoleUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutRolesInput
}

input UserRoleUpdateManyDataInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserRoleUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserRoleUpdateManyWithoutUsersInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutUsersInput!]
  delete: [UserRoleWhereUniqueInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutUsersInput!]
}

input UserRoleUpdateManyWithWhereNestedInput {
  data: UserRoleUpdateManyDataInput!
  where: UserRoleScalarWhereInput!
}

input UserRoleUpdateWithoutUsersDataInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserRoleUpdateWithWhereUniqueWithoutUsersInput {
  data: UserRoleUpdateWithoutUsersDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpsertWithWhereUniqueWithoutUsersInput {
  create: UserRoleCreateWithoutUsersInput!
  update: UserRoleUpdateWithoutUsersDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  users: UserListRelationFilter
}

input UserRoleWhereUniqueInput {
  id: String
}

input UserScalarWhereInput {
  address: JsonNullableFilter
  AND: [UserScalarWhereInput!]
  email: StringFilter
  firstName: StringNullableFilter
  gender: Gender
  id: StringFilter
  interests: [Topic!]
  lastName: StringNullableFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  wantsNewsletter: BoolFilter
  yearOfBirth: IntNullableFilter
}

type UserSocialMedia {
  id: String!
  instagram: String!
  twitter: String!
  user: User!
}

input UserSocialMediaCreateOneWithoutUserInput {
  connect: UserSocialMediaWhereUniqueInput
  create: UserSocialMediaCreateWithoutUserInput
}

input UserSocialMediaCreateWithoutUserInput {
  id: String
  instagram: String!
  twitter: String!
}

input UserSocialMediaUpdateOneWithoutUserInput {
  connect: UserSocialMediaWhereUniqueInput
  create: UserSocialMediaCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: UserSocialMediaUpdateWithoutUserDataInput
  upsert: UserSocialMediaUpsertWithoutUserInput
}

input UserSocialMediaUpdateWithoutUserDataInput {
  id: StringFieldUpdateOperationsInput
  instagram: StringFieldUpdateOperationsInput
  twitter: StringFieldUpdateOperationsInput
}

input UserSocialMediaUpsertWithoutUserInput {
  create: UserSocialMediaCreateWithoutUserInput!
  update: UserSocialMediaUpdateWithoutUserDataInput!
}

input UserSocialMediaWhereInput {
  AND: [UserSocialMediaWhereInput!]
  id: StringFilter
  instagram: StringFilter
  NOT: [UserSocialMediaWhereInput!]
  OR: [UserSocialMediaWhereInput!]
  twitter: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input UserSocialMediaWhereUniqueInput {
  id: String
}

input UserUpdateInput {
  address: Json
  blogPosts: BlogPostUpdateManyWithoutAuthorInput
  comments: BlogPostCommentUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  gender: Gender
  id: StringFieldUpdateOperationsInput
  interests: UserUpdateinterestsInput
  lastName: NullableStringFieldUpdateOperationsInput
  roles: UserRoleUpdateManyWithoutUsersInput
  userSocialMedia: UserSocialMediaUpdateOneWithoutUserInput
  wantsNewsletter: BoolFieldUpdateOperationsInput
  yearOfBirth: NullableIntFieldUpdateOperationsInput
}

input UserUpdateinterestsInput {
  set: [Topic!]
}

input UserUpdateManyDataInput {
  address: Json
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  gender: Gender
  id: StringFieldUpdateOperationsInput
  interests: UserUpdateinterestsInput
  lastName: NullableStringFieldUpdateOperationsInput
  wantsNewsletter: BoolFieldUpdateOperationsInput
  yearOfBirth: NullableIntFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  address: Json
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  gender: Gender
  id: StringFieldUpdateOperationsInput
  interests: UserUpdateinterestsInput
  lastName: NullableStringFieldUpdateOperationsInput
  wantsNewsletter: BoolFieldUpdateOperationsInput
  yearOfBirth: NullableIntFieldUpdateOperationsInput
}

input UserUpdateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRolesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRolesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRolesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneWithoutBlogPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBlogPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutBlogPostsDataInput
  upsert: UserUpsertWithoutBlogPostsInput
}

input UserUpdateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateWithoutBlogPostsDataInput {
  address: Json
  comments: BlogPostCommentUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  gender: Gender
  id: StringFieldUpdateOperationsInput
  interests: UserUpdateinterestsInput
  lastName: NullableStringFieldUpdateOperationsInput
  roles: UserRoleUpdateManyWithoutUsersInput
  userSocialMedia: UserSocialMediaUpdateOneWithoutUserInput
  wantsNewsletter: BoolFieldUpdateOperationsInput
  yearOfBirth: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentsDataInput {
  address: Json
  blogPosts: BlogPostUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  gender: Gender
  id: StringFieldUpdateOperationsInput
  interests: UserUpdateinterestsInput
  lastName: NullableStringFieldUpdateOperationsInput
  roles: UserRoleUpdateManyWithoutUsersInput
  userSocialMedia: UserSocialMediaUpdateOneWithoutUserInput
  wantsNewsletter: BoolFieldUpdateOperationsInput
  yearOfBirth: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutRolesDataInput {
  address: Json
  blogPosts: BlogPostUpdateManyWithoutAuthorInput
  comments: BlogPostCommentUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  gender: Gender
  id: StringFieldUpdateOperationsInput
  interests: UserUpdateinterestsInput
  lastName: NullableStringFieldUpdateOperationsInput
  userSocialMedia: UserSocialMediaUpdateOneWithoutUserInput
  wantsNewsletter: BoolFieldUpdateOperationsInput
  yearOfBirth: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutRolesInput {
  data: UserUpdateWithoutRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutBlogPostsInput {
  create: UserCreateWithoutBlogPostsInput!
  update: UserUpdateWithoutBlogPostsDataInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsDataInput!
}

input UserUpsertWithWhereUniqueWithoutRolesInput {
  create: UserCreateWithoutRolesInput!
  update: UserUpdateWithoutRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  address: JsonNullableFilter
  AND: [UserWhereInput!]
  blogPosts: BlogPostListRelationFilter
  comments: BlogPostCommentListRelationFilter
  email: StringFilter
  firstName: StringNullableFilter
  gender: Gender
  id: StringFilter
  interests: [Topic!]
  lastName: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  roles: UserRoleListRelationFilter
  userSocialMedia: UserSocialMediaWhereInput
  wantsNewsletter: BoolFilter
  yearOfBirth: IntNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
